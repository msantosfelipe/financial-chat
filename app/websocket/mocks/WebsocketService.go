// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	websocket "github.com/gorilla/websocket"
	mock "github.com/stretchr/testify/mock"
)

// WebsocketService is an autogenerated mock type for the WebsocketService type
type WebsocketService struct {
	mock.Mock
}

// AddUserToRoom provides a mock function with given fields: wsConn, room
func (_m *WebsocketService) AddUserToRoom(wsConn *websocket.Conn, room string) error {
	ret := _m.Called(wsConn, room)

	var r0 error
	if rf, ok := ret.Get(0).(func(*websocket.Conn, string) error); ok {
		r0 = rf(wsConn, room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Clean provides a mock function with given fields:
func (_m *WebsocketService) Clean() {
	_m.Called()
}

// HandleBotMessage provides a mock function with given fields: text, room
func (_m *WebsocketService) HandleBotMessage(text string, room string) {
	_m.Called(text, room)
}

// HandleReceivedMessages provides a mock function with given fields:
func (_m *WebsocketService) HandleReceivedMessages() {
	_m.Called()
}

// ListenAndSendMessage provides a mock function with given fields: wsConn, room
func (_m *WebsocketService) ListenAndSendMessage(wsConn *websocket.Conn, room string) {
	_m.Called(wsConn, room)
}

// PublishMessageToQueue provides a mock function with given fields: msg, queue
func (_m *WebsocketService) PublishMessageToQueue(msg []byte, queue string) error {
	ret := _m.Called(msg, queue)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string) error); ok {
		r0 = rf(msg, queue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterWSConnection provides a mock function with given fields: w, r
func (_m *WebsocketService) RegisterWSConnection(w http.ResponseWriter, r *http.Request) *websocket.Conn {
	ret := _m.Called(w, r)

	var r0 *websocket.Conn
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) *websocket.Conn); ok {
		r0 = rf(w, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*websocket.Conn)
		}
	}

	return r0
}

// SendBotMessage provides a mock function with given fields: room, text
func (_m *WebsocketService) SendBotMessage(room string, text string) {
	_m.Called(room, text)
}

// SendMessage provides a mock function with given fields: user, room, text
func (_m *WebsocketService) SendMessage(user string, room string, text string) {
	_m.Called(user, room, text)
}

// SendPreviousCachedMessages provides a mock function with given fields: wsConn, room
func (_m *WebsocketService) SendPreviousCachedMessages(wsConn *websocket.Conn, room string) {
	_m.Called(wsConn, room)
}

// StockHandler provides a mock function with given fields: stock, room
func (_m *WebsocketService) StockHandler(stock string, room string) error {
	ret := _m.Called(stock, room)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(stock, room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewWebsocketService interface {
	mock.TestingT
	Cleanup(func())
}

// NewWebsocketService creates a new instance of WebsocketService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWebsocketService(t mockConstructorTestingTNewWebsocketService) *WebsocketService {
	mock := &WebsocketService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
