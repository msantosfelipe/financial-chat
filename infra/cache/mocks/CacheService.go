// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CacheService is an autogenerated mock type for the CacheService type
type CacheService struct {
	mock.Mock
}

// ExistsChatKey provides a mock function with given fields: room
func (_m *CacheService) ExistsChatKey(room string) bool {
	ret := _m.Called(room)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(room)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetPreviousChatMessages provides a mock function with given fields: room
func (_m *CacheService) GetPreviousChatMessages(room string) []string {
	ret := _m.Called(room)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(room)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// HandleChatSize provides a mock function with given fields: room
func (_m *CacheService) HandleChatSize(room string) {
	_m.Called(room)
}

// StoreChatMessage provides a mock function with given fields: message, room
func (_m *CacheService) StoreChatMessage(message []byte, room string) {
	_m.Called(message, room)
}

type mockConstructorTestingTNewCacheService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCacheService creates a new instance of CacheService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCacheService(t mockConstructorTestingTNewCacheService) *CacheService {
	mock := &CacheService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
